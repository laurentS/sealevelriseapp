{"version":3,"sources":["Home.js","components/UpArrow.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["fetchPostcodeLatLng","postcode","Promise","resolve","reject","a","postcodeSanitized","String","replace","fetch","response","ok","status","json","data","lat","result","latitude","lng","longitude","Home","props","useState","term","setTerm","error","setError","onSubmit","e","preventDefault","history","push","console","log","className","role","placeholder","type","onChange","target","value","UpArrow","onClick","c","document","getElementsByClassName","style","top","xmlns","width","height","viewBox","d","Map","onViewportChanged","vp","newUrl","zoom","center","toFixed","state","match","params","this","position","maxZoom","TileLayer","attribution","url","maxNativeZoom","Marker","href","rel","React","Component","App","exact","path","component","to","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b996079.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport \"./Home.css\";\n\nconst fetchPostcodeLatLng = postcode =>\n  new Promise(async (resolve, reject) => {\n    const postcodeSanitized = String(postcode).replace(\" \", \"\");\n    try {\n      const response = await fetch(\n        `https://api.postcodes.io/postcodes/${postcodeSanitized}`\n      );\n\n      if (!response.ok) {\n        if (String(response.status) === \"404\") {\n          reject(\"Post Code not found. Please enter a full UK Postcode\");\n        } else {\n          reject(\"Please enter a valid UK postcode \");\n        }\n      }\n\n      const data = await response.json();\n\n      resolve({\n        lat: data.result.latitude,\n        lng: data.result.longitude\n      });\n    } catch (error) {\n      // TODO: handle sentry\n      reject(\"There was an error\");\n    }\n  });\n\nconst Home = props => {\n  const [term, setTerm] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const onSubmit = async e => {\n    e.preventDefault();\n\n    try {\n      const { lat, lng } = await fetchPostcodeLatLng(term);\n\n      props.history.push(`/map/14/${lng}/${lat}`);\n    } catch (error) {\n      console.log(error);\n      setError(error)\n    }\n  };\n\n  return (\n    <div className=\"home\">\n      <div className=\"home__postcode-form-container\">\n        <form className=\"home__postcode-form\" onSubmit={onSubmit}>\n          <h1 className=\"home__title\">Will My House Be Flooded?<span className=\"home__warning-emoji\" role=\"img\">⚠️</span></h1>\n          <legend className=\"home__legend\">Find out if rising sea levels will affect your home</legend>\n            {error && <div className=\"home__error-message\">{error}</div>}\n          <div className=\"home__form-inputs\">\n            <input\n              className=\"home__postcode-input\"\n              placeholder=\"Enter your postcode\"\n              type=\"text\"\n              onChange={e => setTerm(e.target.value)}\n            />\n            <button className=\"home__submit\" type=\"submit\">\n              Search\n            </button>\n          </div>\n        </form>\n      </div>\n      <div className=\"home__background-image\" />\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nconst UpArrow = () => {\n  function arrowClick(e) {\n    const c = document.getElementsByClassName(\"map__info\")[0]\n    if (c.style.top !== \"20%\") {\n      c.style.top = \"20%\";\n    } else {\n      c.style.top = \"calc(100% - 60px)\";\n    }\n  }\n  return (\n    <div onClick={arrowClick}>\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"100%\"\n      height=\"100%\"\n      viewBox=\"0 0 284.929 284.929\"\n    >\n      <path d=\"M282.082 195.285L149.028 62.24c-1.901-1.903-4.088-2.856-6.562-2.856s-4.665.953-6.567 2.856L2.856 195.285C.95 197.191 0 199.378 0 201.853c0 2.474.953 4.664 2.856 6.566l14.272 14.271c1.903 1.903 4.093 2.854 6.567 2.854s4.664-.951 6.567-2.854l112.204-112.202 112.208 112.209c1.902 1.903 4.093 2.848 6.563 2.848 2.478 0 4.668-.951 6.57-2.848l14.274-14.277c1.902-1.902 2.847-4.093 2.847-6.566.001-2.476-.944-4.666-2.846-6.569z\" />\n        </svg>\n    </div>\n  );\n};\n\nexport default UpArrow;\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer, Marker } from \"react-leaflet\";\n\nimport \"./Map.css\";\nimport UpArrow from \"./components/UpArrow\";\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = props.match.params;\n  }\n\n  onViewportChanged = vp => {\n    const newUrl = `/map/${vp.zoom}/${vp.center[1].toFixed(\n      5\n    )}/${vp.center[0].toFixed(5)}`;\n    this.props.history.replace(newUrl);\n  };\n\n  render() {\n    const { state } = this;\n    const position = [state.lat, state.lng];\n    return (\n      <div className=\"map\">\n        <LeafletMap\n          center={position}\n          zoom={state.zoom}\n          maxZoom={15}\n          onViewportChanged={this.onViewportChanged}\n        >\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n          />\n          <TileLayer\n            attribution='<a href=\"https://climatecentral.org/\">Climate Central</a>'\n            maxNativeZoom={11}\n            // 2030 - sea level rise + annual floods - moderate cuts - medium luck\n      url=\"https://d1jpwx71i0x1cy.cloudfront.net/map/5ec03d4c7f9bd9f5c84822a1234834d1/{z}/{x}/{y}\" //?token=c6fb3d1a7bd5eff4deada8ec166bc7f9\"\n            // 2050 - sea level rise + annual floods - moderate cuts - medium luck\n      // url=\"https://d1jpwx71i0x1cy.cloudfront.net/map/50189d72c213112cc6401f423bc9bf31/{z}/{x}/{y}\" //?token=6122f7f88ea77f6867b52f01ea10bba9\"\n          />\n          <Marker position={position}></Marker>\n        </LeafletMap>\n        <div className=\"map__info\">\n          <div className=\"map__info-up-arrow\">\n            <UpArrow />\n          </div>\n          <h1 className=\"map__info-title\">\n            Warning{\" \"}\n            <span className=\"map__warning-emoji\" role=\"img\">\n              ⚠️\n            </span>\n          </h1>\n            <p>The red zone shows the predicted flood levels in 2030, areas that are expected to flood on average once a year.<br />(Read the science on <a href=\"https://coastal.climatecentral.org/map/6/-4.5936/54.2445/?theme=sea_level_rise&map_type=coastal_dem_comparison&elevation_model=coastal_dem&forecast_year=2050&pathway=rcp45&percentile=p50&return_level=return_level_1&slr_model=kopp_2014\">Climate Central</a>)</p>\n          <p>\n            Vote for the candidate who will make a government committed to\n            climate change – or buy some sandbags.\n          </p>\n          <p>\n            The Conservative Government has failed to act on Climate Change, but\n            are on track to win another five years in office.\n          </p>\n          <div className=\"btm-par\">\n            <a\n              href=\"https://tactical.vote\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Find candidates who will stop the Tories and protect the climate{\" \"}\n            </a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport Home from \"./Home\";\nimport Map from \"./Map\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/map/:zoom/:lng/:lat\" component={Map} />\n        <Route path=\"*\">\n          <Redirect to=\"/\" />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css'\nimport './form-reset.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}