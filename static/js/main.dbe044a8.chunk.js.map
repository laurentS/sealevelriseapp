{"version":3,"sources":["Home.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["fetchPostcodeLatLng","postcode","Promise","resolve","reject","a","postcodeSanitized","String","replace","fetch","response","ok","status","json","data","lat","result","latitude","lng","longitude","Home","props","useState","term","setTerm","error","setError","onSubmit","e","preventDefault","history","push","console","log","className","type","onChange","target","value","Map","state","match","params","this","position","center","zoom","maxZoom","TileLayer","attribution","url","Marker","Popup","React","Component","App","exact","path","component","to","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6VAIMA,G,MAAsB,SAAAC,GAAQ,OAClC,IAAIC,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,mBAAAC,EAAA,6DACJC,EAAoBC,OAAON,GAAUO,QAAQ,IAAK,IAD9C,kBAGeC,MAAM,sCAAD,OACYH,IAJhC,cAGFI,EAHE,QAOMC,KACoB,QAA5BJ,OAAOG,EAASE,QAClBR,EAAO,wDAEPA,EAAO,uBAXH,SAeWM,EAASG,OAfpB,OAeFC,EAfE,OAiBRX,EAAQ,CACNY,IAAKD,EAAKE,OAAOC,SACjBC,IAAKJ,EAAKE,OAAOG,YAnBX,kDAuBRf,EAAO,sBAvBC,0DAAZ,2DAoEagB,EAzCF,SAAAC,GAAU,IAAD,EACIC,mBAAS,IADb,mBACbC,EADa,KACPC,EADO,OAEMF,mBAAS,IAFf,mBAEbG,EAFa,KAENC,EAFM,KAIdC,EAAQ,uCAAG,WAAMC,GAAN,mBAAAvB,EAAA,6DACfuB,EAAEC,iBADa,kBAIc7B,EAAoBuB,GAJlC,gBAILR,EAJK,EAILA,IAAKG,EAJA,EAIAA,IAEbG,EAAMS,QAAQC,KAAd,kBAA8Bb,EAA9B,YAAqCH,IANxB,kDAQbiB,QAAQC,IAAR,MACAP,EAAS,EAAD,IATK,0DAAH,sDAad,OACE,yBAAKQ,UAAU,QACb,yBAAKA,UAAU,iCACb,0BAAMA,UAAU,sBAAsBP,SAAUA,GAC9C,wBAAIO,UAAU,eAAd,oBACA,4BAAQA,UAAU,gBAAlB,uDACGT,GAAS,yBAAKS,UAAU,uBAAuBT,GAClD,yBAAKS,UAAU,qBACb,2BACEA,UAAU,uBACVC,KAAK,OACLC,SAAU,SAAAR,GAAC,OAAIJ,EAAQI,EAAES,OAAOC,UAElC,4BAAQJ,UAAU,eAAeC,KAAK,UAAtC,SAMN,yBAAKD,UAAU,6B,wECnCNK,G,kBA3Bb,WAAYlB,GAAQ,IAAD,8BACjB,4CAAMA,KACDmB,MAAQnB,EAAMoB,MAAMC,OAFR,E,sEAKT,IACAF,EAAUG,KAAVH,MACFI,EAAW,CAACJ,EAAMzB,IAAKyB,EAAMtB,KACnC,OACE,yBAAKgB,UAAU,OACb,kBAAC,IAAD,CAAYW,OAAQD,EAAUE,KAAMN,EAAMM,KAAMC,QAAS,IACvD,kBAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,6CAEN,kBAACF,EAAA,EAAD,CAAWE,IAAI,kIACf,kBAACC,EAAA,EAAD,CAAQP,SAAUA,GAChB,kBAACQ,EAAA,EAAD,6BACuB,6BADvB,gC,GAlBMC,IAAMC,Y,MCwBTC,MAhBf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtC,IACjC,kBAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,uBAAuBC,UAAWnB,IACpD,kBAAC,IAAD,CAAOkB,KAAK,KACV,kBAAC,IAAD,CAAUE,GAAG,WCTLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStB,MACvB,2DCXNuB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dbe044a8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport \"./Home.css\";\n\nconst fetchPostcodeLatLng = postcode =>\n  new Promise(async (resolve, reject) => {\n    const postcodeSanitized = String(postcode).replace(\" \", \"\");\n    try {\n      const response = await fetch(\n        `https://api.postcodes.io/postcodes/${postcodeSanitized}`\n      );\n\n      if (!response.ok) {\n        if (String(response.status) === \"404\") {\n          reject(\"Post Code not found. Please enter a full UK Postcode\");\n        } else {\n          reject(\"There was an error\");\n        }\n      }\n\n      const data = await response.json();\n\n      resolve({\n        lat: data.result.latitude,\n        lng: data.result.longitude\n      });\n    } catch (error) {\n      // TODO: handle sentry\n      reject(\"There was an error\");\n    }\n  });\n\nconst Home = props => {\n  const [term, setTerm] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const onSubmit = async e => {\n    e.preventDefault();\n\n    try {\n      const { lat, lng } = await fetchPostcodeLatLng(term);\n\n      props.history.push(`/map/14/${lng}/${lat}`);\n    } catch (error) {\n      console.log(error);\n      setError(error)\n    }\n  };\n\n  return (\n    <div className=\"home\">\n      <div className=\"home__postcode-form-container\">\n        <form className=\"home__postcode-form\" onSubmit={onSubmit}>\n          <h1 className=\"home__title\">Sea Level Rising</h1>\n          <legend className=\"home__legend\">Enter you post below to see if you are under water.</legend>\n            {error && <div className=\"home__error-message\">{error}</div>}\n          <div className=\"home__form-inputs\">\n            <input\n              className=\"home__postcode-input\"\n              type=\"text\"\n              onChange={e => setTerm(e.target.value)}\n            />\n            <button className=\"home__submit\" type=\"submit\">\n              Go\n            </button>\n          </div>\n        </form>\n      </div>\n      <div className=\"home__background-image\" />\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer, Marker, Popup } from \"react-leaflet\";\n\nimport \"./Map.css\"\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = props.match.params;\n  }\n\n  render() {\n    const { state } = this;\n    const position = [state.lat, state.lng];\n    return (\n      <div className=\"map\">\n        <LeafletMap center={position} zoom={state.zoom} maxZoom={18}>\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n          />\n          <TileLayer url=\"https://d1jpwx71i0x1cy.cloudfront.net/map/50189d72c213112cc6401f423bc9bf31/{z}/{x}/{y}?token=f23c727cb1906b127f462b1c0ec073c4\" />\n          <Marker position={position}>\n            <Popup>\n              A pretty CSS3 popup. <br /> Easily customizable.\n            </Popup>\n          </Marker>\n        </LeafletMap>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport Home from \"./Home\";\nimport Map from \"./Map\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/map/:zoom/:lng/:lat\" component={Map} />\n          <Route path=\"*\">\n            <Redirect to=\"/\" />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}